#importing require liabraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import precision_score, recall_score
import pickle as pkl
from sklearn.neighbors import KNeighborsClassifier
from sklearn import tree, svm
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier

#evaluation of model:
def  eval(y_test, y_pred):
	# accuracy
	accuracy = accuracy_score(y_pred, y_test)
	print("Accuracy : "+str(accuracy))
	print(confusion_matrix(y_pred, y_test))
	precision=precision_score(y_test,y_pred)
	recall=precision_score(y_test,y_pred)
	print("Precision : "+str(precision)+" Recall: "+str(recall))

#reading of dataset
df=pd.read_csv("Dataset.csv",sep=";")

#about the dataset
print(df.shape)

#checking for any null values in all columns
null_series = df.isnull().sum()
count =0
for col, val in null_series.items():
    if(val>0):
        print (col + "      "+ str(val))
    else:
        count = count +1
print("Number of columns with no null values: "+ str(count))

#checking for outliers in all the columns
no_outliers=0
for column in df.columns:
    val=len(df[(df[column]!=0) & (df[column]!=1)])
    if(val>0):
        print(column+" has "+str(val)+" rows with value other than 0,1")
    else:
        no_outliers=no_outliers+1
print("Total number of features with values only 0,1: "+str(no_outliers))

df.type.value_counts() #malacious and benign count

# top 10 permissions of the malacious apps
pd.Series.sort_values(df[df.type==1].sum(axis=0), ascending=False)[1:11] 

# top 10 permissions of the benign apps
pd.Series.sort_values(df[df.type==0].sum(axis=0), ascending=False)[:10]

 #plotting of top 10 features of the malacious apps
pd.Series.sort_values(df[df.type==1].sum(axis=0), ascending=False)[1:11].plot.bar(color="red", title="Malware Apps", ylabel="Count of apps", xlabel="Permissions")

#plotting of top 10 features of the benign apps
pd.Series.sort_values(df[df.type==0].sum(axis=0), ascending=False)[:10].plot.bar(color="green",title="Benign Apps", ylabel="Count of apps", xlabel="Permissions")

#splitting of the data
x_train, x_test, y_train, y_test = train_test_split(df.iloc[:, 1:330], df['type'], test_size=0.20, random_state=42)

#decision tree
model = tree.DecisionTreeClassifier()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)
print("Decision Tree")
eval(y_test,y_pred)
pkl.dump(model, open('decisionTree.pkl','wb'))
